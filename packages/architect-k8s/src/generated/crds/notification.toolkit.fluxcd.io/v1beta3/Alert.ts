import { IObjectMeta } from "@kubernetes-models/apimachinery/apis/meta/v1/ObjectMeta";
import { Model, ModelData, setValidateFunc, createTypeMetaGuard } from "@kubernetes-models/base";
import { ValidateFunc } from "@kubernetes-models/validate";
import { validate } from "../../_schemas/NotificationToolkitFluxcdIoV1beta3Alert.js";

/**
 * Alert is the Schema for the alerts API
 */
export interface IAlert {
  /**
   * APIVersion defines the versioned schema of this representation of an object.
   * Servers should convert recognized schemas to the latest internal value, and
   * may reject unrecognized values.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  "apiVersion": "notification.toolkit.fluxcd.io/v1beta3";
  /**
   * Kind is a string value representing the REST resource this object represents.
   * Servers may infer this from the endpoint the client submits requests to.
   * Cannot be updated.
   * In CamelCase.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  "kind": "Alert";
  "metadata"?: IObjectMeta;
  /**
   * AlertSpec defines an alerting rule for events involving a list of objects.
   */
  "spec"?: {
    /**
     * EventMetadata is an optional field for adding metadata to events dispatched by the
     * controller. This can be used for enhancing the context of the event. If a field
     * would override one already present on the original event as generated by the emitter,
     * then the override doesn't happen, i.e. the original value is preserved, and an info
     * log is printed.
     */
    "eventMetadata"?: {
      [key: string]: string;
    };
    /**
     * EventSeverity specifies how to filter events based on severity.
     * If set to 'info' no events will be filtered.
     */
    "eventSeverity"?: "info" | "error";
    /**
     * EventSources specifies how to filter events based
     * on the involved object kind, name and namespace.
     */
    "eventSources": Array<{
      /**
       * API version of the referent
       */
      "apiVersion"?: string;
      /**
       * Kind of the referent
       */
      "kind": "Bucket" | "GitRepository" | "Kustomization" | "HelmRelease" | "HelmChart" | "HelmRepository" | "ImageRepository" | "ImagePolicy" | "ImageUpdateAutomation" | "OCIRepository";
      /**
       * MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
       * map is equivalent to an element of matchExpressions, whose key field is "key", the
       * operator is "In", and the values array contains only "value". The requirements are ANDed.
       * MatchLabels requires the name to be set to `\*`.
       */
      "matchLabels"?: {
        [key: string]: string;
      };
      /**
       * Name of the referent
       * If multiple resources are targeted `\*` may be set.
       */
      "name": string;
      /**
       * Namespace of the referent
       */
      "namespace"?: string;
    }>;
    /**
     * ExclusionList specifies a list of Golang regular expressions
     * to be used for excluding messages.
     */
    "exclusionList"?: Array<string>;
    /**
     * InclusionList specifies a list of Golang regular expressions
     * to be used for including messages.
     */
    "inclusionList"?: Array<string>;
    /**
     * ProviderRef specifies which Provider this Alert should use.
     */
    "providerRef": {
      /**
       * Name of the referent.
       */
      "name": string;
    };
    /**
     * Summary holds a short description of the impact and affected cluster.
     */
    "summary"?: string;
    /**
     * Suspend tells the controller to suspend subsequent
     * events handling for this Alert.
     */
    "suspend"?: boolean;
  };
}

/**
 * Alert is the Schema for the alerts API
 */
export class Alert extends Model<IAlert> implements IAlert {
  "apiVersion": IAlert["apiVersion"];
  "kind": IAlert["kind"];
  "metadata"?: IAlert["metadata"];
  "spec"?: IAlert["spec"];

static apiVersion: IAlert["apiVersion"] = "notification.toolkit.fluxcd.io/v1beta3";
static kind: IAlert["kind"] = "Alert";
static is = createTypeMetaGuard<IAlert>(Alert);

constructor(data?: ModelData<IAlert>) {
  super({
    apiVersion: Alert.apiVersion,
    kind: Alert.kind,
    ...data
  } as IAlert);
}
}


setValidateFunc(Alert, validate as ValidateFunc<IAlert>);
